include "target.tmh" //default Thrustmaster function

int Eject ;
int Jettison ;
int Chainled ;

int main() 
{ 

Configure(&LMFD,MODE_EXCLUDED); 
Configure(&RMFD,MODE_EXCLUDED);
Configure(&HCougar,MODE_EXCLUDED);
Configure(&T16000,MODE_EXCLUDED);
Configure(&T16000L,MODE_EXCLUDED);
Configure(&TFRPRudder,MODE_EXCLUDED);

if(Init(&EventHandle)) return 1; //event handler
 
//shift button
SetShiftButton(&Joystick,S4);

//set pulse and delay lengths
SetKBRate(50,100);

//LED init state
ActKey(PULSE+KEYON+LED(&Throttle, LED_INTENSITY, 214)); //set Throttle backlight power to 5/6
ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED0)); //set backlight OFF
ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED1)); //set LED 1 OFF
ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED2)); //set LED 2 OFF
ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED3)); //set LED 3 OFF
ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED4)); //set LED 4 OFF
ActKey(PULSE+KEYON+LED(&Throttle, LED_ONOFF, LED_CURRENT-LED5)); //set LED 5 OFF

/////////////////////////////////////////
//Joystick and Throttle Axis Definitions/
/////////////////////////////////////////
MapAxis(&Joystick, JOYX, DX_X_AXIS); 
MapAxis(&Joystick, JOYY, DX_Y_AXIS); 
MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS); 
MapAxis(&Throttle, THR_RIGHT, DX_Z_AXIS); 

//Shift slew to mouse with S4, Shift slider axe to mouse wheel with S4
MapKey(&Joystick, S4, EXEC("MapAxis(&Throttle,SCX,MOUSE_X_AXIS,AXIS_NORMAL,MAP_RELATIVE);"
"SetSCurve(&Throttle, SCX, 0, 10, 0, 0, -5);"
"MapAxis(&Throttle, SCY, MOUSE_Y_AXIS, AXIS_NORMAL, MAP_RELATIVE);"
"SetSCurve(&Throttle, SCY, 0, 10, 0, 0, -5);"
"MapAxis(&Throttle, THR_FC, DX_THROTTLE_AXIS);"
));

MapKeyR(&Joystick, S4, EXEC("MapAxis(&Throttle, SCX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);"
"SetSCurve(&Throttle, SCX, 0, 0, 0, 0, 0);"
"MapAxis(&Throttle, SCY, DX_YROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);"
"SetSCurve(&Throttle, SCY, 0, 0, 0, 0, 0);"
"MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS);"
));
   
//Slew
MapAxis(&Throttle, SCX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
SetSCurve(&Throttle, SCX, 0, 0, 0, 0, 0);
MapAxis(&Throttle, SCY, DX_YROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
SetSCurve(&Throttle, SCY, 0, 0, 0, 0, 0);

//Slew click
MapKeyIO(&Throttle,SC,MOUSE_LEFT,USB[0x5D]); //mouse click, usb code 'num5' for trackir center

//Free assign to throttle friction lever in DCS
MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS);

printf("   \xa");
printf(" --------[ 59th Gemini F/A-18C Profile 1.93 ]-------- \xa");
printf("   \xa");

//////////////////////////////
//Joystick Button Definitions/
//////////////////////////////


MapKeyIO(&Joystick,TG1,L_ALT+USB[0x26],0); //FREE, FINGER LIFTS (BOTH) usb code '9'
MapKey(&Joystick,TG2,USB[0x2C]); // 2nd trigger usb code 'SPC' 
MapKeyIO(&Joystick,S1,TEMPO(USB[0x0C],L_ALT+USB[0x34],500),TEMPO(USB[0x10],USB[0x18],500)); //RAID/FLIR FOV usb code 'i' -LONG PRESS: REFUEL/RELOAD usb code ''', MASTER ARM usb code 'm' -LONG PRESS: CARRIER START usb code 'u'
MapKeyIO(&Joystick,S2,USB[0x06],R_ALT+USB[0x2C]); //CAGE/UNCAGE usb code 'c', Weapon release usb code 'SPC'
MapKeyIO(&Joystick,S3,USB[0x19],USB[0x16]); //NWS usb code 's', TAKE OFF TRIM usb code 'v'

//trim
MapKey(&Joystick,H1U,R_CTL+USB[0x33]); // trim usb code ';'
MapKey(&Joystick,H1D,R_CTL+USB[0x37]); // trim usb code '.'
MapKey(&Joystick,H1L,R_CTL+USB[0x36]); // trim usb code ','
MapKey(&Joystick,H1R,R_CTL+USB[0x38]); // trim usb code '/'

//tms
MapKeyIO(&Joystick,H2U,USB[0x54],TEMPO(R_ALT+USB[0x33],L_SHIFT+USB[0x0F],500)); //usb code '*' zoom -, SENSOR FORWARD usb code ';' -LONG PRESS: SENSOR SELECT DEPRESS usb code 'l'
MapKeyIO(&Joystick,H2D,USB[0x55],R_ALT+USB[0x37]); //usb code '/' zoom +, SENSOR AFT usb code '.'
MapKeyIO(&Joystick,H2L,TEMPO(L_CTL+USB[0x0E],L_ALT+R_SHIFT+USB[0x0D],500),R_ALT+USB[0x36]); //RADAR SWITCH LEFT usb code 'k' -LONG PRESS: HMD - usb code 'j', SENSOR LEFT usb code ','
MapKeyIO(&Joystick,H2R,TEMPO(L_SHIFT+USB[0x0E],L_ALT+R_CTL+USB[0x0D],500),R_ALT+USB[0x38]); //RADAR SWITCH RIGHT usb code 'k' -LONG PRESS: HMD + usb code 'j', SENSOR RIGHT usb code '/'

//dms
MapKeyIO(&Joystick,H3U,TEMPO(L_SHIFT+USB[0x07],PULSE+R_ALT+USB[0x13],500),USB[0x33]); //AMRAAM usb code 'd' -LONG PRESS: PARKING BRAKE STOW usb code 'p', TDC up usb code ';' 
MapKeyIO(&Joystick,H3D,TEMPO(L_SHIFT+USB[0x1B],PULSE+R_CTL+USB[0x13],500),USB[0x37]); //GUN usb code 'x' -LONG PRESS: PARKING BRAKE PULL usb code 'p', TDC down usb code '.' 
MapKeyIO(&Joystick,H3L,TEMPO(L_SHIFT+USB[0x1A],PULSE+L_CTL+USB[0x13],500),USB[0x36]); //AIM7 usb code 'w' -LONG PRESS: PARKING BRAKE LEFT usb code 'p', TDC left usb code ',' 
MapKeyIO(&Joystick,H3R,TEMPO(L_SHIFT+USB[0x16],PULSE+L_ALT+USB[0x13],500),USB[0x38]); //AIM9 usb code 's' -LONG PRESS: PARKING BRAKE RIGHT usb code 'p', TDC right usb code '/' 

//cms
MapKeyIO(&Joystick,H4U,R_SHIFT+USB[0x19],CHAIN(R_SHIFT+USB[0x18],R_SHIFT+USB[0x04])); //FORMATION LIGHTS + usb code 'v', FLOOD-CHART LIGHT + usb code 'u' 'a'
MapKeyIO(&Joystick,H4D,R_CTL+USB[0x19],CHAIN(R_CTL+USB[0x18],R_CTL+USB[0x04])); //FORMATION LIGHTS - usb code 'v', FLOOD-CHART LIGHT - usb code 'u' 'a'
MapKeyIO(&Joystick,H4L,L_SHIFT+USB[0x19],CHAIN(R_SHIFT+USB[0x14],R_SHIFT+USB[0x1A])); //POSITION LIGHTS + usb code 'v', CONSOLE-PANEL LIGHTS + usb code 'q' 'w'
MapKeyIO(&Joystick,H4R,L_CTL+USB[0x19],CHAIN(R_CTL+USB[0x14],R_CTL+USB[0x1A])); //POSITION LIGHTS - usb code 'v', CONSOLE-PANEL LIGHTS - usb code 'q' 'w'
MapKeyIO(&Joystick,H4P,TEMPO(USB[0x43],PULSE+USB[0x29],500),TEMPO(USB[0x17],PULSE+USB[0x48],500)); //usb code 'F10' map -LONG PRESS: Escape,  ATC usb code 't' -LONG PRESS: Pause


//////////////////////////////
//Throttle Button Definitions/
//////////////////////////////

//Functions definitions

Eject = CHAIN(PULSE+LED(&Throttle,LED_ONOFF,LED_CURRENT^LED0),PULSE+L_CTL+USB[0x08]); //Chain needed for the ejection sequence on button "LDGH"

//MIC
MapKeyIO(&Throttle,MSU,0,L_CTL+USB[0x55]);
MapKeyIO(&Throttle,MSD,PULSE+R_SHIFT+USB[0x0B],L_SHIFT+USB[0x55]);
MapKeyIO(&Throttle,MSL,R_CTL+R_SHIFT+USB[0x0B],R_CTL+USB[0x31]); //nightvision + usb code 'h', COMM2 usb code '\'
MapKeyIO(&Throttle,MSR,R_ALT+R_SHIFT+USB[0x0B],R_ALT+USB[0x31]); //nightvision - usb code 'h', COMM1 usb code '\'
MapKeyIO(&Throttle,MSP,0,R_CTL+USB[0x57]);


//speedbrake
MapKeyIO(&Throttle,SPDB,USB[0x04],CHAIN(L_SHIFT+USB[0x05],LED(&Throttle,LED_ONOFF,LED_CURRENT+LED3))); //AP NWS OFF 'a', DEPLOY AIRBRAKE usb code 'b' LED3 ON
MapKeyIO(&Throttle,SPDM,0,LED(&Throttle,LED_ONOFF,LED_CURRENT-LED3)); // Speedbrake middle LED3 OFF
MapKeyIO(&Throttle,SPDF,L_ALT+L_CTL+USB[0x04],CHAIN(L_CTL+USB[0x05],LED(&Throttle,LED_ONOFF,LED_CURRENT+LED3))); //JETTISON CTR/LIN/RIN usb code 'a', RETRACT AIRBRAKE usb code 'b' LED3 ON

//Boat switch
MapKeyIO(&Throttle,BSB,PULSE+R_ALT+USB[0x0F],PULSE+R_CTL+USB[0x06]);//LANDING LIGHT OFF usb code 'l', STROBE DIM usb code 'c'
MapKeyIO(&Throttle,BSM,0,PULSE+R_CTL+R_SHIFT+USB[0x06]);//FREE usb code '', STROBE OFF usb code 'c'
MapKeyIO(&Throttle,BSF,PULSE+R_ALT+R_SHIFT+USB[0x0F],PULSE+R_SHIFT+USB[0x06]);//LANDING LIGHT ON usb code 'l', STROBE BRIGHT usb code 'c'

//China hat
MapKeyIO(&Throttle,CHB,TEMPO(PULSE+USB[0x1F],L_ALT+USB[0x0F],500),TEMPO(USB[0x07],USB[0x04],500));//MODE AG usb code '2' -LONG PRESS: TORCH usb code 'l', FLARE usb code 'd' -LONG PRESS: AUTOPILOT/NWS/G-LIMITER OFF usb code 'a'
MapKeyIO(&Throttle,CHF,TEMPO(PULSE+USB[0x1E],PULSE+R_ALT+USB[0x15],500),TEMPO(USB[0x08],USB[0x15],500));//MODE AA usb code '1' -LONG PRESS: ALE 47 POWER usb code 'r' , CHAFF usb code 'e' -LONG PRESS: RECCE MARK usb code 'r'


//Pinkie
MapKey(&Throttle,PSB,0); //FREE usb code ''
MapKey(&Throttle,PSM,CHAIN(PULSE+L_SHIFT+USB[0x17],D(),LED(&Throttle,LED_ONOFF,LED_CURRENT-LED5))); //EXT LIGHTS OFF usb code 't' LED5 OFF
MapKey(&Throttle,PSF,CHAIN(PULSE+L_CTL+USB[0x17],D(),LED(&Throttle,LED_ONOFF,LED_CURRENT+LED5))); //EXT LIGHTS ON usb code 't' LED5 ON

//Left ap button
MapKeyIO(&Throttle,LTB,REXEC(0, 90, "ActKey(KEYON+Eject);"),USB[0x28]); //Ejection script and BACKLIGHT BLINK usb code 'e', TDC DOWN ACTION usb code 'ENTER'

//Coolie
MapKeyIO(&Throttle,CSU,TEMPO(PULSE+USB[0x3A],AXIS(MOUSE_Z_AXIS, 2, 100),500),PULSE+USB[0x2F]);//view cockpit usb code 'F1' -LONG PRESS:SCROLLWHEEL UP, Planchette  previous usb code '[' -LONG PRESS: FREE
MapKeyIO(&Throttle,CSD,TEMPO(PULSE+USB[0x3B],AXIS(MOUSE_Z_AXIS, -2, 100),500),PULSE+USB[0x30]);//view external usb code 'F2' -LONG PRESS:SCROLLWHEEL DOWN, Planchette  next usb code ']' -LONG PRESS: FREE
MapKeyIO(&Throttle,CSL,PULSE+USB[0x3C],CHAIN(R_SHIFT+USB[0x08],R_SHIFT+USB[0x34],R_SHIFT+USB[0x33],R_SHIFT+USB[0x30])); //view flyby usb code 'F3', MDI-MPCD LIGHT + usb code 'e' ''' ';' ']'
MapKeyIO(&Throttle,CSR,PULSE+USB[0x3D],PULSE+R_SHIFT+USB[0x0E]); //view arcade usb code 'F4',Planchette  on/off usb code 'k'

//base
MapKeyIO(&Throttle,EFLNORM,0,PULSE+L_ALT+L_CTL+USB[0x08]); //DISPENSER ON usb code 'e'
MapKeyIO(&Throttle,EFRNORM,0,DX17); // FUEL PROBE ingame bind
MapKeyIO(&Throttle,EFLOVER,0,PULSE+L_CTL+L_SHIFT+USB[0x08]); //DISPENSER OFF usb code 'e'
MapKeyIO(&Throttle,EOLMOTOR,0,CHAIN(PULSE+R_CTL+USB[0x05],D(),LED(&Throttle,LED_ONOFF,LED_CURRENT-LED1))); //BATTERY OFF usb code 'b' LED1 OFF
MapKeyIO(&Throttle,EORMOTOR,0,CHAIN(PULSE+R_CTL+USB[0x2F],D(),PULSE+R_CTL+USB[0x31],D(),PULSE+L_CTL+USB[0x12])); //FREE usb code '', '\'LEFT-RIGHT MDI OFF OXYGEN OFF  usb code '[' '\' 'o'
MapKeyIO(&Throttle,EOLNORM,0,CHAIN(PULSE+R_SHIFT+USB[0x05],D(),LED(&Throttle,LED_ONOFF,LED_CURRENT+LED1))); //BATTERY usb code 'b' LED1 ON
MapKeyIO(&Throttle,EORNORM,0,CHAIN(PULSE+R_SHIFT+USB[0x2F],D(),PULSE+R_SHIFT+USB[0x31],D(),PULSE+L_SHIFT+USB[0x12])); //FREE usb code '', LEFT-RIGHT MDI DAY OXYGEN ON usb code '[' 'o'
MapKeyIO(&Throttle,EOLIGN,R_SHIFT+USB[0x12],USB[0x1C]); //WING FOLD LEFT usb code 'o', FCS BIT usb code 'y'
MapKeyIO(&Throttle,EORIGN,R_CTL+USB[0x12],L_CTL+USB[0x33]); //WING FOLD RIGHT usb code 'o' FCS RESET usb code ';' 
MapKeyIO(&Throttle,APUON,0,DX20); //APU ON/OFF ingame bind
MapKeyIO(&Throttle,LDGH,L_CTL+L_SHIFT+USB[0x04],USB[0x11]); //EMER JETT usb code 'a', RESET MASTER WARNING usb code 'n'
MapKey(&Throttle,FLAPU,CHAIN(PULSE+USB[0x09],D(),PULSE+LED(&Throttle,LED_ONOFF,LED_CURRENT-LED3))); //FLAPS AUTO usb code 'f' LED3 OFF
MapKey(&Throttle,FLAPM,CHAIN(PULSE+L_SHIFT+USB[0x09],D(),PULSE+LED(&Throttle,LED_ONOFF,LED_CURRENT+LED3))); //FLAPS HALF usb code 'f' LED3 ON
MapKey(&Throttle,FLAPD,CHAIN(PULSE+L_CTL+USB[0x09],D(),PULSE+LED(&Throttle,LED_ONOFF,LED_CURRENT+LED3))); //FLAPS FULL usb code 'f' LED3 ON
MapKeyIO(&Throttle,EACON,0,CHAIN(PULSE+L_CTL+USB[0x0A],D(),PULSE+LED(&Throttle,LED_ONOFF,LED_CURRENT-LED2))); //GEAR UP usb code 'g' LED2 OFF
MapKeyIO(&Throttle,EACOFF,0,CHAIN(PULSE+L_SHIFT+USB[0x0A],D(),PULSE+LED(&Throttle,LED_ONOFF,LED_CURRENT+LED2))); //GEAR DOWN usb code 'g' LED2 ON
MapKeyIO(&Throttle,RDRDIS,0,CHAIN(PULSE+L_CTL+USB[0x0B],D(),PULSE+LED(&Throttle,LED_ONOFF,LED_CURRENT+LED4))); //HOOK DOWN usb code 'h' LED4 ON
MapKeyIO(&Throttle,RDRNRM,0,CHAIN(PULSE+L_SHIFT+USB[0x0B],D(),PULSE+LED(&Throttle,LED_ONOFF,LED_CURRENT-LED4))); //HOOK UP usb code 'h' LED4 OFF
MapKeyIO(&Throttle,APENG,TEMPO(USB[0x12],R_SHIFT+USB[0x36],500),TEMPO(CHAIN(DOWN+L_CTL,DOWN+USB[0x0D],D(200),UP+USB[0x0D],D(50),UP+L_CTL),R_SHIFT+USB[0x38],500));
//WING FOLD PULL/STOW usb code 'o' -LONG PRESS: STARTER LEFT usb code ',', LAUNCH BAR UP/DOWN usb code 'j' -LONG PRESS: STARTER RIGHT usb code '/'
MapKeyIO(&Throttle,APPAT,R_SHIFT+USB[0x09],L_CTL+L_SHIFT+USB[0x0C]); //VOICE TEST TAPE A usb code 'f', OPEN CANOPY usb code 'i'
MapKeyIO(&Throttle,APAH,0,PULSE+L_SHIFT+USB[0x0C]); //CANOPY HOLD/OFF usb code 'i'
MapKeyIO(&Throttle,APALT,R_CTL+USB[0x09],L_CTL+USB[0x0C]); //VOICE TEST TAPE B usb code 'f', CLOSE CANOPY usb code 'i'
MapKey(&Throttle,IDLELON,CHAIN(PULSE+R_ALT+USB[0x4D],D(),LED(&Throttle,LED_ONOFF,LED_CURRENT-LED0))); //IDLE->OFF LEFT ENGINE STOP BACKLIGHT OFF
MapKey(&Throttle,IDLERON,CHAIN(PULSE+R_SHIFT+USB[0x4D],D(),LED(&Throttle,LED_ONOFF,LED_CURRENT-LED0))); //IDLE->OFF RIGHT ENGINE STOP BACKLIGHT OFF
MapKey(&Throttle,IDLELOFF,CHAIN(LED(&Throttle,LED_ONOFF,LED_CURRENT+LED0),D(),PULSE+R_ALT+USB[0x4A])); //OFF->IDLE  LEFT ENGINE START BACKLIGHT ON
MapKey(&Throttle,IDLEROFF,CHAIN(LED(&Throttle,LED_ONOFF,LED_CURRENT+LED0),D(),PULSE+R_SHIFT+USB[0x4A])); //OFF->IDLE  RIGHT ENGINE START BACKLIGHT ON

} 
 
int EventHandle(int type, alias o, int x) 
{ 
DefaultMapping(&o, x); 
}